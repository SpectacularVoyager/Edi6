package com.ankush.EDI.ReflectionUtils;

import com.ankush.EDI.ReflectionUtils.Annotations.AutoGenerated;
import com.ankush.EDI.ReflectionUtils.Annotations.Insert;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.jdbc.core.ArgumentPreparedStatementSetter;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import java.awt.*;
import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Stream;

@Slf4j
public class InsertJDBCObject<T> extends SqlJDBCObject<Insert> {
    String table;
    String name;
    private String query;
    private List<Field> autoGen;

    public InsertJDBCObject(String table, Class<?> clazz, JdbcTemplate template) {
        super(clazz, template);
        this.table = table;
        List<Field> fields = getFields(Insert.class);
        init(fields);
    }

    public InsertJDBCObject(String table, Class<?> clazz, JdbcTemplate template, String name) {
        super(clazz, template);
        this.table = table;
        List<Field> fields = getFields(Insert.class, i -> i.stmt().equals(name));
        init(fields);
    }

    void init(List<Field> fields) {
        List<String> columns = fields.stream().map(x -> PresentOr(x.getAnnotation(Insert.class).col(), x.getName())).toList();
        String q = String.join(",", Collections.nCopies(columns.size(), "?"));
        Object[] args = new Object[columns.size()];
        query = String.format("INSERT INTO %s (%s) VALUES (%s)", table, String.join(",", columns), q);
        autoGen = Arrays.stream(clazz.getFields()).filter(x -> x.isAnnotationPresent(AutoGenerated.class)).toList();
        if (autoGen.size() >= 2) {
            throw new RuntimeException("MULTIPLE AUTO GENS FOUND:\t" + autoGen.stream().map(Field::getName));
        }
        log.info(query);


    }


    //
    public KeyHolder insert(T o) throws IllegalAccessException {
        return insert(o, getFields(Insert.class));
    }
//
//    public KeyHolder insert(T o, String s) throws IllegalAccessException {
//        return insert(o, getFields(Insert.class, a -> a.annotationType().isAnnotationPresent(AutoGenerated.class)));
//    }

    private KeyHolder insert(T o, List<Field> fields) throws IllegalAccessException {
        Object[] args = new Object[fields.size()];
        for (int i = 0; i < fields.size(); i++) {
            args[i] = fields.get(i).get(o);
        }
        PreparedStatementSetter pss = new ArgumentPreparedStatementSetter(args);
        if (autoGen.isEmpty()) {
            template.update(query, pss);
            return null;
        } else {
            KeyHolder kh = new GeneratedKeyHolder();
            template.update(con -> {
                PreparedStatement stmt = con.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
                pss.setValues(stmt);
                return stmt;
            }, kh);
            return kh;
        }
    }

}
