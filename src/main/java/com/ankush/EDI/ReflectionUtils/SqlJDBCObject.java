package com.ankush.EDI.ReflectionUtils;

import com.ankush.EDI.ReflectionUtils.Annotations.AutoGenerated;
import com.ankush.EDI.ReflectionUtils.Annotations.Insert;
import com.fasterxml.classmate.Annotations;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import org.springframework.jdbc.core.ArgumentPreparedStatementSetter;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.sql.PreparedStatement;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.function.Predicate;

@AllArgsConstructor
public class SqlJDBCObject<A extends Annotation> {
    Class<?> clazz;
    JdbcTemplate template;

    protected List<Field> getFields(Class<? extends Annotation> annotation) {
        return Arrays.stream(clazz.getFields()).filter(x -> x.isAnnotationPresent(annotation)).toList();
    }

    protected List<Field> getFields(Class<? extends Annotation> annotation, Predicate<A> pred) {
        return Arrays.stream(clazz.getFields()).filter(x -> x.isAnnotationPresent(annotation)).filter(x -> pred.test((A) x.getAnnotation(annotation))).toList();
    }

    protected String PresentOr(String a, String b) {
        if (a == null) return b;
        return a.isEmpty() ? b : a;
    }

}
